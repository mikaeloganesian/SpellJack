import React, { useState, useEffect } from 'react';
import { observer } from 'mobx-react-lite';
import { gameStore } from '../Store';
import Player from './Player';
import Dealer from './Dealer';
import Controls from './Controls';
import ActualDeckControl from './ActualDeckControl';
import SpecialCardsPanel from './SpecialCardsPanel';
import { useVK } from '../hooks/useVK';

const createPlayerDeck = (customCards = []) => {
  const newDeck = [];
  if (customCards.length > 0) {
    for (let card of customCards) {
      newDeck.push({ value: card.value, suit: card.suit, id: card.id, special: card.special, effect: card.effect });
    }
  } else {
    const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
    const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
    let idCounter = 1000;
    for (let suit of suits) {
      for (let value of values) {
        newDeck.push({ id: idCounter++, value, suit, special: false });
      }
    }
  }
  return shuffleDeck(newDeck);
};

const createDealerDeck = () => {
  const newDeck = [];
  const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
  const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
  let idCounter = 2000;
  for (let suit of suits) {
    for (let value of values) {
      newDeck.push({ id: idCounter++, value, suit, special: false });
    }
  }
  return shuffleDeck(newDeck);
};

const shuffleDeck = (deck) => {
  for (let i = deck.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [deck[i], deck[j]] = [deck[j], deck[i]];
  }
  return deck;
};

const calculateScore = (hand, isPlayerHand = true) => {
  let score = 0;
  let aces = 0;

  for (let card of hand) {
    if (card.special) continue;

    let cardValue = 0;
    if (['J', 'Q', 'K'].includes(card.value)) {
      cardValue = 10;
    } else if (card.value === 'A') {
      aces++;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑"
      if (gameStore.activeEffects.fireAce) {
        cardValue = 12;
        console.log("–û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑ –∞–∫—Ç–∏–≤–µ–Ω: " + cardValue);
      } else {
        cardValue = 11;
      }
    } else {
      cardValue = parseInt(card.value, 10);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –º–∞—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞
    if (isPlayerHand) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–∏–π
      const suitMultiplier = card.suitMultiplierSnapshot || gameStore.getSuitMultiplier(card.suit);
      cardValue = Math.floor(cardValue * suitMultiplier);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞ (–ø–æ–ª–æ–≤–∏–Ω–∞ –æ—á–∫–æ–≤, –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑)
      if (card.chronometerEffect) {
        cardValue = Math.floor(cardValue / 2);
        console.log(`‚è∞ –•—Ä–æ–Ω–æ–º–µ—Ç—Ä: –æ—á–∫–∏ –∫–∞—Ä—Ç—ã ${card.value}${card.suit} —É–º–µ–Ω—å—à–µ–Ω—ã –≤–¥–≤–æ–µ –¥–æ ${cardValue}`);
      }
    }

    score += cardValue;
    console.log(`–ö–∞—Ä—Ç–∞: ${card.value}${card.suit}, –ó–Ω–∞—á–µ–Ω–∏–µ: ${cardValue}, –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: ${score}`);
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —É–∫–∞–∑ (+2 –æ—á–∫–∞ –∫ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ –ü–û–°–õ–ï –≤—Å–µ—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)
  if (isPlayerHand && gameStore.activeEffects.royalDecree) {
    const nonSpecialCards = hand.filter(card => !card.special).length;
    score += nonSpecialCards * 2;
    console.log(`üëë –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —É–∫–∞–∑: +${nonSpecialCards * 2} –æ—á–∫–æ–≤ (${nonSpecialCards} –∫–∞—Ä—Ç √ó 2)`);
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç—É–∑–æ–≤: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—É–∑—ã –∏ –ø–µ—Ä–µ–±–æ—Ä, 
  // –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ç—É–∑—ã –∏–∑ 11/12 –≤ 1 –æ—á–∫–æ –ø–æ –æ–¥–Ω–æ–º—É, –ø–æ–∫–∞ –Ω–µ —É–±–µ—Ä–µ–º –ø–µ—Ä–µ–±–æ—Ä –∏–ª–∏ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è —Ç—É–∑—ã
  let acesAsEleven = aces;
  while (acesAsEleven > 0 && score > gameStore.currentTarget) {
    if (gameStore.activeEffects.fireAce) {
      score -= 11; // –û–¥–∏–Ω —Ç—É–∑ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 1 –≤–º–µ—Å—Ç–æ 12 (12-1=11)
    } else {
      score -= 10; // –û–¥–∏–Ω —Ç—É–∑ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 1 –≤–º–µ—Å—Ç–æ 11 (11-1=10)
    }
    acesAsEleven--;
  }
  
  // –¢—É–∑–æ–≤–∞—è –±—Ä–æ–Ω—è: –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç aceArmor –∏ –≤—Å—ë –µ—â—ë –ø–µ—Ä–µ–±–æ—Ä, 
  // –º–æ–∂–µ–º "—Å–ø–∞—Å—Ç–∏" –µ—â–µ –æ–¥–∏–Ω —Ç—É–∑ (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç—É–∑—ã)
  if (isPlayerHand && gameStore.activeEffects.aceArmor && aces > 0 && score > gameStore.currentTarget) {
    if (gameStore.activeEffects.fireAce) {
      score -= 11; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¢—É–∑–æ–≤–æ–π –±—Ä–æ–Ω–∏ (12-1=11)
    } else {
      score -= 10; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¢—É–∑–æ–≤–æ–π –±—Ä–æ–Ω–∏ (11-1=10)
    }
  }
  
  return score;
};

const MainGame = observer(() => {
  // VK —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
  const { vibrate, shareScore } = useVK();
  
  // dealer deck –æ—Å—Ç–∞—ë—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ, –∫–æ–ª–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ –≤ store
  const [dealerDeck, setDealerDeck] = useState([]);
  const [currentGamePlayerDeck, setCurrentGamePlayerDeck] = useState([]); // –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
  const [playerHand, setPlayerHand] = useState([]);
  const [dealerHand, setDealerHand] = useState([]);
  const [playerScore, setPlayerScore] = useState(0);
  const [dealerScore, setDealerScore] = useState(0);
  const [isPlayerTurn, setIsPlayerTurn] = useState(true);
  const [winner, setWinner] = useState('');
  const [isGameActive, setIsGameActive] = useState(false);
  const [isAnimating, setIsAnimating] = useState(false);

  // –ú–æ–¥–∞–ª–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–¥–æ–π
  const [showDeck, setShowDeck] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã "–û–±–º–µ–Ω —É–¥–∞—á–∏"
  const [isCardSelectionMode, setIsCardSelectionMode] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä"
  const [isCriticalChoiceMode, setIsCriticalChoiceMode] = useState(false);
  const [criticalChoiceCards, setCriticalChoiceCards] = useState([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã "–ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ"
  const [nextCardSuit, setNextCardSuit] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã "–ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏—è"
  const [foresightCards, setForesightCards] = useState([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–∏ (–º–∞–≥–Ω–∏—Ç –º–∞—Å—Ç–µ–π)
  const [showSuitChoice, setShowSuitChoice] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã —Å—É–¥—å–±—ã
  const [destinyPreview, setDestinyPreview] = useState(null);
  const [showDestinyPreview, setShowDestinyPreview] = useState(false);

  useEffect(() => {
    if (isGameActive) {
      startNewGame();
    }
  }, [isGameActive]);

  useEffect(() => {
    if (!isPlayerTurn && isGameActive) {
      handleDealerTurn();
    }
  }, [isPlayerTurn, isGameActive]);

  useEffect(() => {
    if (!showDeck) return;
    const onKey = (e) => e.key === 'Escape' && setShowDeck(false);
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, [showDeck]);

  const startNewGame = () => {
    // –°–±—Ä–æ—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
    gameStore.resetGameEffects();
    
    // —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—É—é –∫–æ–ª–æ–¥—É –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∫–∞—Ä—Ç (store)
    const shuffledPlayerDeck = createPlayerDeck(gameStore.playerDeck);
    const shuffledDealerDeck = createDealerDeck();

    gameStore.generateNewTarget();
    gameStore.generateSuitMultipliers();

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    gameStore.checkPassiveEffects('gameStart');

    if (shuffledPlayerDeck.length < 2 || shuffledDealerDeck.length < 2) {
      setWinner('Not enough cards in the deck to play! Add more cards in Deck Editor.');
      setIsGameActive(false);
      return;
    }

    // —Ä–∞–∑–¥–∞—ë–º –ø–æ 2 –∫–∞—Ä—Ç—ã, –æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–ª–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ store!)
    const currentGameDeck = [...shuffledPlayerDeck];
    const firstCard = currentGameDeck.pop();
    const secondCard = currentGameDeck.pop();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
    if (firstCard && !firstCard.special) {
      firstCard.suitMultiplierSnapshot = gameStore.getSuitMultiplier(firstCard.suit);
    }
    if (secondCard && !secondCard.special) {
      secondCard.suitMultiplierSnapshot = gameStore.getSuitMultiplier(secondCard.suit);
    }
    
    const newPlayerHand = [firstCard, secondCard];
    const newDealerHand = [shuffledDealerDeck.pop(), shuffledDealerDeck.pop()];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–ª–æ–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –¢–ï–ö–£–©–ï–ô –∏–≥—Ä—ã, –ù–ï –≤ store
    setCurrentGamePlayerDeck(currentGameDeck);

    setDealerDeck(shuffledDealerDeck);
    setPlayerHand(newPlayerHand);
    setDealerHand(newDealerHand);
    setPlayerScore(calculateScore(newPlayerHand, true));
    setDealerScore(calculateScore(newDealerHand, false));
    setIsPlayerTurn(true);
    setWinner('');
    setIsGameActive(true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞" –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
    if (gameStore.activeEffects.luckySeven) {
      const initialSevens = newPlayerHand.filter(card => card.value === '7' && !card.special);
      if (initialSevens.length > 0) {
        const coinsEarned = initialSevens.length * 7;
        gameStore.addCoins(coinsEarned);
        console.log(`üçÄ –°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞! –ù–∞–π–¥–µ–Ω–æ ${initialSevens.length} —Å–µ–º—ë—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä—É–∫–µ, –ø–æ–ª—É—á–µ–Ω–æ +${coinsEarned} –º–æ–Ω–µ—Ç!`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setWinner(`üçÄ –°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞! –ù–∞—á–∞–ª—å–Ω—ã–µ —Å–µ–º—ë—Ä–∫–∏ –¥–∞–ª–∏ +${coinsEarned} –º–æ–Ω–µ—Ç!`);
        vibrate('success');
        
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setWinner('');
        }, 3000);
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
    setIsCardSelectionMode(false);
    setIsCriticalChoiceMode(false);
    setCriticalChoiceCards([]);
    setNextCardSuit(null);
  };

  const checkWinner = (finalPlayerScore, finalDealerScore) => {
    const target = gameStore.currentTarget;

    let gameResult = '';
    let coinReward = 10; // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–î–≤–æ–π–Ω–∞—è —Å—Ç–∞–≤–∫–∞"
    if (gameStore.activeEffects.doubleBet) {
      coinReward *= 2;
    }
    
    if (finalPlayerScore > target) {
      setWinner('Dealer wins!');
      gameResult = 'loss';
      vibrate('error');
    } else if (finalDealerScore > target) {
      setWinner(gameStore.activeEffects.doubleBet ? 
        `Player wins! +${coinReward} –º–æ–Ω–µ—Ç (x2 –±–æ–Ω—É—Å!)` : 
        'Player wins!');
      gameStore.addCoins(coinReward);
      gameResult = 'win';
      vibrate('success');
    } else if (finalPlayerScore === finalDealerScore) {
      setWinner('Push!');
      gameResult = 'draw';
      vibrate('light');
    } else if (finalPlayerScore > finalDealerScore) {
      setWinner(gameStore.activeEffects.doubleBet ? 
        `Player wins! +${coinReward} –º–æ–Ω–µ—Ç (x2 –±–æ–Ω—É—Å!)` : 
        'Player wins!');
      gameStore.addCoins(coinReward);
      gameResult = 'win';
      vibrate('success');
    } else {
      setWinner('Dealer wins!');
      gameResult = 'loss';
      vibrate('error');
    }
    
    setIsGameActive(false);
  };

  const drawFromPlayerDeck = () => {
    const deck = [...currentGamePlayerDeck];
    const card = deck.pop() || null;
    setCurrentGamePlayerDeck(deck); // –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ª–æ–¥—É —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    return card;
  };

  const handleHit = () => {
    if (!isGameActive || !isPlayerTurn || isAnimating) return;

    setIsAnimating(true);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫–∞—Ä—Ç—ã
    gameStore.applyAutoEffects();

    setTimeout(() => {
      const newCard = drawFromPlayerDeck();
      if (!newCard) {
        setIsAnimating(false);
        return;
      }

      if (newCard.special) {
        const result = gameStore.applyCardEffect(newCard.effect);
        
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (result && result.requiresSuitChoice) {
          setShowSuitChoice(true);
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          if (result.message) {
            console.log(result.message);
          }
        }
        
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —Å—É–¥—å–±—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã
        if (result && result.requiresDestinyPreview) {
          const nextCard = currentGamePlayerDeck[0]; // –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –≤ –∫–æ–ª–æ–¥–µ
          if (nextCard) {
            const preview = gameStore.previewNextCardOutcome(playerHand, playerScore, nextCard);
            setDestinyPreview(preview);
            setShowDestinyPreview(true);
          }
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          if (result.message) {
            console.log(result.message);
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã
      if (!newCard.special) {
        newCard.suitMultiplierSnapshot = gameStore.getSuitMultiplier(newCard.suit);
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∑—è—Ç–∞ –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞
        if (gameStore.activeEffects.chronometer > 0) {
          newCard.chronometerEffect = true;
        }
      }

      let newPlayerHand = [...playerHand, newCard];
      let newPlayerScore = calculateScore(newPlayerHand, true);


      // –õ–û–ì–ò–ö–ê –î–í–û–ô–ù–û–ì–û –£–î–ê–†–ê
      if (gameStore.activeEffects.doubleNext && !newCard.special) {
        console.log('‚ö° –î–≤–æ–π–Ω–æ–π —É–¥–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—á–∫–∏ –∫–∞—Ä—Ç—ã —É–¥–≤–æ–µ–Ω—ã.');
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç —Å —É–¥–≤–æ–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã
        const lastCardBonusScore = calculateCardDoubleBonus(newCard);
        newPlayerScore += lastCardBonusScore;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setWinner(`‚ö° –î–≤–æ–π–Ω–æ–π —É–¥–∞—Ä! ${newCard.value}${newCard.suit} –¥–∞–µ—Ç +${lastCardBonusScore} –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤!`);
        vibrate('success');

        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setWinner('');
        }, 3000);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        gameStore.activeEffects.doubleNext = false;
      }

      // –õ–û–ì–ò–ö–ê –ó–û–õ–û–¢–û–ì–û –ö–ê–°–ê–ù–ò–Ø
      if (gameStore.activeEffects.goldenTouch && !newCard.special) {
        console.log('‚ú® –ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ!');
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∞ (—Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)
        let cardValue = 0;
        if (['J', 'Q', 'K'].includes(newCard.value)) {
          cardValue = 10;
        } else if (newCard.value === 'A') {
          if (gameStore.activeEffects.fireAce) {
            cardValue = 12;
          } else {
            cardValue = 11;
          }
        } else {
          cardValue = parseInt(newCard.value, 10);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π)
        const suitMultiplier = newCard.suitMultiplierSnapshot || gameStore.getSuitMultiplier(newCard.suit);
        const finalCardValue = Math.floor(cardValue * suitMultiplier);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã —Ä–∞–≤–Ω—ã–µ –∏—Ç–æ–≥–æ–≤—ã–º –æ—á–∫–∞–º –∫–∞—Ä—Ç—ã
        gameStore.addCoins(finalCardValue);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setWinner(`‚ú® –ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ! ${newCard.value}${newCard.suit} –¥–∞–µ—Ç +${finalCardValue} –º–æ–Ω–µ—Ç!`);
        vibrate('success');

        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setWinner('');
        }, 3000);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        gameStore.activeEffects.goldenTouch = false;
      }

      // –õ–û–ì–ò–ö–ê –°–ß–ê–°–¢–õ–ò–í–û–ô –°–ï–ú–Å–†–ö–ò
      if (gameStore.activeEffects.luckySeven && newCard.value === '7' && !newCard.special) {
        console.log('üçÄ –°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞! +7 –º–æ–Ω–µ—Ç!');
        
        // –î–æ–±–∞–≤–ª—è–µ–º 7 –º–æ–Ω–µ—Ç
        gameStore.addCoins(7);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setWinner(`üçÄ –°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞! –ü–æ–ª—É—á–µ–Ω–æ +7 –º–æ–Ω–µ—Ç –∑–∞ ${newCard.value}${newCard.suit}!`);
        vibrate('success');

        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setWinner('');
        }, 3000);
      }


      // –õ–û–ì–ò–ö–ê –©–ò–¢–ê - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–û–°–õ–ï –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã
      if (newPlayerScore > gameStore.currentTarget && gameStore.activeEffects.shield) {
        console.log('üõ°Ô∏è –©–∏—Ç —Å—Ä–∞–±–æ—Ç–∞–ª! –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É.');
        newPlayerHand.pop(); // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∑—è—Ç—É—é –∫–∞—Ä—Ç—É
        newPlayerScore = calculateScore(newPlayerHand, true); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç
        gameStore.activeEffects.shield = false; // –û—Ç–∫–ª—é—á–∞–µ–º —â–∏—Ç
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —â–∏—Ç–∞
        setWinner('üõ°Ô∏è –©–∏—Ç —Å—Ä–∞–±–æ—Ç–∞–ª! –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...');
        vibrate('success'); // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setWinner('');
        }, 3000);
        
        // –ò–≥—Ä–∞ –ü–†–û–î–û–õ–ñ–ê–ï–¢–°–Ø - –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –µ—â–µ –∫–∞—Ä—Ç—ã
        setPlayerHand(newPlayerHand);
        setPlayerScore(newPlayerScore);
        setIsAnimating(false);
        return; // –í—ã—Ö–æ–¥–∏–º, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—è —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      }

      if (gameStore.activeEffects.extraCard) {
        const extraCard = drawFromPlayerDeck();
        if (extraCard) {
          if (extraCard.special) gameStore.applyCardEffect(extraCard.effect);
          newPlayerHand.push(extraCard);
          newPlayerScore = calculateScore(newPlayerHand, true);
        }
        gameStore.activeEffects.extraCard = false;
      }

      // –õ–û–ì–ò–ö–ê –•–†–û–ù–û–ú–ï–¢–†–ê - —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∏ –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (gameStore.activeEffects.chronometer > 0 && !newCard.special) {
        gameStore.activeEffects.chronometer--;
        console.log(`‚è∞ –•—Ä–æ–Ω–æ–º–µ—Ç—Ä: –æ—Å—Ç–∞–ª–æ—Å—å ${gameStore.activeEffects.chronometer} –∫–∞—Ä—Ç —Å –ø–æ–ª–æ–≤–∏–Ω–Ω—ã–º–∏ –æ—á–∫–∞–º–∏`);
        
        if (gameStore.activeEffects.chronometer === 0) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞
          setWinner('‚è∞ –•—Ä–æ–Ω–æ–º–µ—Ç—Ä –æ—Ç–∫–ª—é—á—ë–Ω! –ö–∞—Ä—Ç—ã —Å–Ω–æ–≤–∞ –¥–∞—é—Ç –ø–æ–ª–Ω—ã–µ –æ—á–∫–∏.');
          vibrate('light');
          
          // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            setWinner('');
          }, 2000);
        }
      }

      setPlayerHand(newPlayerHand);
      setPlayerScore(newPlayerScore);
      setIsAnimating(false);

      if (newPlayerScore >= gameStore.currentTarget) {
        setIsPlayerTurn(false);
        if (newPlayerScore === gameStore.currentTarget) {
          let perfectReward = 20; // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–î–≤–æ–π–Ω–∞—è —Å—Ç–∞–≤–∫–∞"
          if (gameStore.activeEffects.doubleBet) {
            perfectReward *= 2;
          }
          
          setWinner(gameStore.activeEffects.doubleBet ? 
            `Perfect! Player wins! +${perfectReward} –º–æ–Ω–µ—Ç (x2 –±–æ–Ω—É—Å!)` : 
            'Perfect! Player wins!');
          gameStore.addCoins(perfectReward);
          setIsGameActive(false);
        }
      }
    }, 500);
  };

  const handleStand = () => {
    if (!isGameActive || !isPlayerTurn) return;
    setIsPlayerTurn(false);
  };

  const handleDealerTurn = () => {
    let newDealerDeck = [...dealerDeck];
    let newDealerHand = [...dealerHand];
    let newDealerScore = calculateScore(newDealerHand, false);

    if (gameStore.activeEffects.removeDealerCard) {
      if (newDealerHand.length > 0) {
        newDealerHand.pop();
        newDealerScore = calculateScore(newDealerHand, false);
      }
      gameStore.activeEffects.removeDealerCard = false;
    }

    const target = gameStore.currentTarget;
    let dealerThreshold = target <= 30 ? 17 : Math.floor(target * 0.85);

    // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–ª–µ—Ä–∞ - –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ –Ω—É–∂–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
    while (newDealerScore < dealerThreshold && newDealerScore < target && newDealerDeck.length > 0) {
      newDealerHand.push(newDealerDeck.pop());
      newDealerScore = calculateScore(newDealerHand, false);
    }

    // –ö–ê–†–¢–ê-–õ–û–í–£–®–ö–ê: –ø—Ä–∏–Ω—É–∂–¥–∞–µ—Ç –¥–∏–ª–µ—Ä–∞ –≤–∑—è—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –æ–±—ã—á–Ω–æ–π –ª–æ–≥–∏–∫–∏
    if (gameStore.activeEffects.dealerTrap && newDealerDeck.length > 0) {
      console.log('ü™§ –ö–∞—Ä—Ç–∞-–ª–æ–≤—É—à–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞! –î–∏–ª–µ—Ä –≤—ã–Ω—É–∂–¥–µ–Ω –≤–∑—è—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É.');
      
      // –î–∏–ª–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–µ—Ä–µ—Ç –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É
      newDealerHand.push(newDealerDeck.pop());
      newDealerScore = calculateScore(newDealerHand, false);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      setWinner('ü™§ –ö–∞—Ä—Ç–∞-–ª–æ–≤—É—à–∫–∞! –î–∏–ª–µ—Ä –≤—ã–Ω—É–∂–¥–µ–Ω –≤–∑—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...');
      vibrate('success');
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ MobX action)
      gameStore.disableDealerTrap();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –°–ù–ê–ß–ê–õ–ê
      setDealerDeck(newDealerDeck);
      setDealerHand(newDealerHand);
      setDealerScore(newDealerScore);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setWinner(''); // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–æ–≤—É—à–∫–µ
        checkWinner(playerScore, newDealerScore); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
      }, 3000);
      
      return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å checkWinner —Å—Ä–∞–∑—É
    }

    setDealerDeck(newDealerDeck);
    setDealerHand(newDealerHand);
    setDealerScore(newDealerScore);

    checkWinner(playerScore, newDealerScore);
  };



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —É–¥–∞—Ä–∞
  const calculateCardDoubleBonus = (card) => {
    let baseValue = 0;
    
    if (['J', 'Q', 'K'].includes(card.value)) {
      baseValue = 10;
    } else if (card.value === 'A') {
      // –£—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑"
      if (gameStore.activeEffects.fireAce) {
        baseValue = 12; // –û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑ = 12 –æ—á–∫–æ–≤
      } else {
        baseValue = 11; // –û–±—ã—á–Ω—ã–π —Ç—É–∑ = 11 –æ—á–∫–æ–≤
      }
    } else {
      baseValue = parseInt(card.value, 10);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –º–∞—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä)
    const suitMultiplier = card.suitMultiplierSnapshot || gameStore.getSuitMultiplier(card.suit);
    const finalCardValue = Math.floor(baseValue * suitMultiplier);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∂–µ –æ—á–∫–æ–≤ –∫–∞–∫ –±–æ–Ω—É—Å (—É–¥–≤–∞–∏–≤–∞–Ω–∏–µ)
    return finalCardValue;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç—ã (–∫–∞—Ä—Ç–∞ "–û–±–º–µ–Ω —É–¥–∞—á–∏")
  const handleCardSwap = (cardIndex) => {
    if (!isCardSelectionMode || !isGameActive || currentGamePlayerDeck.length === 0) return;

    const newPlayerHand = [...playerHand];
    const newPlayerDeck = [...currentGamePlayerDeck];
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é –∏–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å
    const cardToSwap = newPlayerHand[cardIndex];
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
    const newCard = newPlayerDeck.pop();
    
    if (!newCard) {
      setWinner('–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞! –û–±–º–µ–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.');
      setIsCardSelectionMode(false);
      setTimeout(() => setWinner(''), 2000);
      return;
    }

    // –ó–∞–º–µ–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ —Ä—É–∫–µ
    newPlayerHand[cardIndex] = newCard;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    if (!newCard.special) {
      newCard.suitMultiplierSnapshot = gameStore.getSuitMultiplier(newCard.suit);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–ª–æ–¥—É (–≤ –∫–æ–Ω–µ—Ü)
    newPlayerDeck.unshift(cardToSwap);
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
    const shuffledDeck = shuffleDeck(newPlayerDeck);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setPlayerHand(newPlayerHand);
    setCurrentGamePlayerDeck(shuffledDeck);
    setPlayerScore(calculateScore(newPlayerHand, true));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ" –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    let goldenTouchCoins = 0;
    if (gameStore.activeEffects.goldenTouch && !newCard.special) {
      console.log('‚ú® –ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∏ –æ–±–º–µ–Ω–µ!');
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∞ (—Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)
      let cardValue = 0;
      if (['J', 'Q', 'K'].includes(newCard.value)) {
        cardValue = 10;
      } else if (newCard.value === 'A') {
        if (gameStore.activeEffects.fireAce) {
          cardValue = 12;
        } else {
          cardValue = 11;
        }
      } else {
        cardValue = parseInt(newCard.value, 10);
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π)
      const suitMultiplier = newCard.suitMultiplierSnapshot || gameStore.getSuitMultiplier(newCard.suit);
      const finalCardValue = Math.floor(cardValue * suitMultiplier);
      goldenTouchCoins = finalCardValue;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã —Ä–∞–≤–Ω—ã–µ –∏—Ç–æ–≥–æ–≤—ã–º –æ—á–∫–∞–º –∫–∞—Ä—Ç—ã
      gameStore.addCoins(finalCardValue);
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      gameStore.activeEffects.goldenTouch = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞" –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    if (gameStore.activeEffects.luckySeven && newCard.value === '7' && !newCard.special) {
      gameStore.addCoins(7);
      console.log('üçÄ –°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ! +7 –º–æ–Ω–µ—Ç!');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    let message = `üîÑ –û–±–º–µ–Ω —É–¥–∞—á–∏! ${cardToSwap.value}${cardToSwap.suit} ‚Üí ${newCard.value}${newCard.suit}`;
    if (gameStore.activeEffects.luckySeven && newCard.value === '7' && !newCard.special) {
      message += ' (+7 –º–æ–Ω–µ—Ç –∑–∞ —Å–µ–º—ë—Ä–∫—É!)';
    }
    if (goldenTouchCoins > 0) {
      message += ` (‚ú® +${goldenTouchCoins} –º–æ–Ω–µ—Ç!)`;
    }
    setWinner(message);
    vibrate('success');
    
    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞
    setTimeout(() => {
      setWinner('');
    }, 2500);
    
    setIsCardSelectionMode(false);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
    gameStore.disableSwapCard();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
  const handleCardSwapActivate = () => {
    setIsCardSelectionMode(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–≤—É—Ö –Ω–æ–≤—ã—Ö (–∫–∞—Ä—Ç–∞ "–°–±—Ä–æ—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è")
  const handleResetHand = () => {
    if (currentGamePlayerDeck.length < 2) {
      setWinner('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ –¥–ª—è —Å–±—Ä–æ—Å–∞!');
      setTimeout(() => setWinner(''), 2000);
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ (–Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–ª–æ–¥—É - –æ–Ω–∏ —É—Ö–æ–¥—è—Ç "–≤ –¥–∏—Å–∫–∞—Ä–¥")
    const newPlayerDeck = [...currentGamePlayerDeck];
    
    // –ë–µ—Ä–µ–º –¥–≤–µ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã
    const newHand = [];
    const firstCard = newPlayerDeck.pop();
    const secondCard = newPlayerDeck.pop();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç
    if (firstCard && !firstCard.special) {
      firstCard.suitMultiplierSnapshot = gameStore.getSuitMultiplier(firstCard.suit);
    }
    if (secondCard && !secondCard.special) {
      secondCard.suitMultiplierSnapshot = gameStore.getSuitMultiplier(secondCard.suit);
    }
    
    newHand.push(firstCard);
    newHand.push(secondCard);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setPlayerHand(newHand);
    setCurrentGamePlayerDeck(newPlayerDeck);
    setPlayerScore(calculateScore(newHand, true));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞" –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç
    if (gameStore.activeEffects.luckySeven) {
      const newSevens = newHand.filter(card => card.value === '7' && !card.special);
      if (newSevens.length > 0) {
        const coinsEarned = newSevens.length * 7;
        gameStore.addCoins(coinsEarned);
        console.log(`üçÄ –°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞! –ù–∞–π–¥–µ–Ω–æ ${newSevens.length} —Å–µ–º—ë—Ä–æ–∫ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞, –ø–æ–ª—É—á–µ–Ω–æ +${coinsEarned} –º–æ–Ω–µ—Ç!`);
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    let message = `üí• –°–±—Ä–æ—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è! –ù–æ–≤–∞—è —Ä—É–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!`;
    if (gameStore.activeEffects.luckySeven) {
      const newSevens = newHand.filter(card => card.value === '7' && !card.special);
      if (newSevens.length > 0) {
        const coinsEarned = newSevens.length * 7;
        message += ` (+${coinsEarned} –º–æ–Ω–µ—Ç –∑–∞ —Å–µ–º—ë—Ä–∫–∏!)`;
      }
    }
    setWinner(message);
    vibrate('success');
    
    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => {
      setWinner('');
    }, 2500);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–∫–∞—Ä—Ç–∞ "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä")
  const handleCriticalChoiceActivate = () => {
    if (currentGamePlayerDeck.length < 3) {
      setWinner('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞!');
      setTimeout(() => setWinner(''), 2000);
      return;
    }

    // –ë–µ—Ä–µ–º 3 –≤–µ—Ä—Ö–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã (–Ω–µ —É–¥–∞–ª—è—è –∏—Ö –ø–æ–∫–∞)
    const topCards = currentGamePlayerDeck.slice(-3);
    setCriticalChoiceCards(topCards);
    setIsCriticalChoiceMode(true);
    
    setWinner('üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ä—Ç!');
    
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–±–æ—Ä–µ
  const handleCriticalCardChoice = (chosenCardIndex) => {
    const chosenCard = criticalChoiceCards[chosenCardIndex];
    const newPlayerDeck = [...currentGamePlayerDeck];
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ 3 –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
    newPlayerDeck.splice(-3, 3);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –≤ —Ä—É–∫—É
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    if (!chosenCard.special) {
      chosenCard.suitMultiplierSnapshot = gameStore.getSuitMultiplier(chosenCard.suit);
    }
    
    const newPlayerHand = [...playerHand, chosenCard];
    const newPlayerScore = calculateScore(newPlayerHand, true);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setPlayerHand(newPlayerHand);
    setCurrentGamePlayerDeck(newPlayerDeck);
    setPlayerScore(newPlayerScore);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    if (gameStore.activeEffects.goldenTouch && !chosenCard.special) {
      console.log('‚ú® –ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–±–æ—Ä–µ!');
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∞ (—Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)
      let cardValue = 0;
      if (['J', 'Q', 'K'].includes(chosenCard.value)) {
        cardValue = 10;
      } else if (chosenCard.value === 'A') {
        if (gameStore.activeEffects.fireAce) {
          cardValue = 12;
        } else {
          cardValue = 11;
        }
      } else {
        cardValue = parseInt(chosenCard.value, 10);
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π)
      const suitMultiplier = chosenCard.suitMultiplierSnapshot || gameStore.getSuitMultiplier(chosenCard.suit);
      const finalCardValue = Math.floor(cardValue * suitMultiplier);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã —Ä–∞–≤–Ω—ã–µ –∏—Ç–æ–≥–æ–≤—ã–º –æ—á–∫–∞–º –∫–∞—Ä—Ç—ã
      gameStore.addCoins(finalCardValue);
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      gameStore.activeEffects.goldenTouch = false;
      
      console.log(`‚ú® –ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ: –ø–æ–ª—É—á–µ–Ω–æ ${finalCardValue} –º–æ–Ω–µ—Ç –∑–∞ ${chosenCard.value}${chosenCard.suit}!`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    if (gameStore.activeEffects.luckySeven && chosenCard.value === '7' && !chosenCard.special) {
      gameStore.addCoins(7);
      console.log('üçÄ –°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–±–æ—Ä–µ! +7 –º–æ–Ω–µ—Ç!');
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞
    setIsCriticalChoiceMode(false);
    setCriticalChoiceCards([]);

    setWinner('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–±–æ—Ä –∏–ª–∏ –ø–æ–±–µ–¥—É
    setTimeout(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–±–æ—Ä –∏–ª–∏ –ø–æ–±–µ–¥—É
      if (newPlayerScore > gameStore.currentTarget) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —â–∏—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∞
        if (gameStore.activeEffects.shield) {
          gameStore.disableShield(); // –û—Ç–∫–ª—é—á–∞–µ–º —â–∏—Ç
          setWinner(`üõ°Ô∏è –©–∏—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∞ —Å—Ä–∞–±–æ—Ç–∞–ª! –ü–µ—Ä–µ–±–æ—Ä –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â—ë–Ω (${newPlayerScore})`);
          vibrate('success');
          setTimeout(() => {
            setWinner('');
          }, 2500);
        } else {
          // –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä
          setIsGameActive(false);
          setIsPlayerTurn(false);
          checkWinner(newPlayerScore, dealerScore);
          return;
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã
        let message = `üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä! –ü–æ–ª—É—á–µ–Ω–∞: ${chosenCard.value}${chosenCard.suit}`;
        if (gameStore.activeEffects.luckySeven && chosenCard.value === '7' && !chosenCard.special) {
          message += ' (+7 –º–æ–Ω–µ—Ç –∑–∞ —Å–µ–º—ë—Ä–∫—É!)';
        }
        setWinner(message);
        vibrate('success');
        
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setWinner('');
        }, 3000);
      }
    }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∞ (–∫–∞—Ä—Ç–∞ "–ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ")
  const handleCartographerActivate = () => {
    if (currentGamePlayerDeck.length === 0) {
      setWinner('‚ùå –í –∫–æ–ª–æ–¥–µ –Ω–µ—Ç –∫–∞—Ä—Ç!');
      setTimeout(() => setWinner(''), 2000);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç—É (–ø–æ—Å–ª–µ–¥–Ω—é—é –≤ –º–∞—Å—Å–∏–≤–µ)
    const nextCard = currentGamePlayerDeck[currentGamePlayerDeck.length - 1];
    setNextCardSuit(nextCard.suit);
    
    setWinner(`üó∫Ô∏è –ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ: —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –º–∞—Å—Ç–∏ ${nextCard.suit}`);
    vibrate('success');
    
    // –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      setWinner('');
      setNextCardSuit(null);
    }, 5000);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Å—Ç–æ–ø–∞–¥–∞ (–∫–∞—Ä—Ç–∞ "–õ–∏—Å—Ç–æ–ø–∞–¥")
  const handleLeafFallActivate = () => {
    if (playerHand.length === 0) {
      setWinner('‚ùå –ù–µ—Ç –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ –¥–ª—è —Å–±—Ä–æ—Å–∞!');
      setTimeout(() => setWinner(''), 2000);
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏
    const randomIndex = Math.floor(Math.random() * playerHand.length);
    const droppedCard = playerHand[randomIndex];
    const newHand = playerHand.filter((_, index) => index !== randomIndex);
    
    setPlayerHand(newHand);
    setPlayerScore(calculateScore(newHand, true));
    
    // –î–∞—ë–º +3 –º–æ–Ω–µ—Ç—ã
    gameStore.addCoins(3);
    
    setWinner(`üçÉ –õ–∏—Å—Ç–æ–ø–∞–¥: —Å–±—Ä–æ—à–µ–Ω–∞ ${droppedCard.value}${droppedCard.suit}, +3 üí∞`);
    vibrate('success');
    
    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setWinner('');
    }, 3000);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞–≥–Ω–∏—Ç–∞ –º–∞—Å—Ç–µ–π
  const handleSuitMagnetActivate = () => {
    setShowSuitChoice(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã —Å—É–¥—å–±—ã
  const handleDestinyActivate = () => {
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã (—Ç–∞–∫ –∫–∞–∫ drawFromPlayerDeck –∏—Å–ø–æ–ª—å–∑—É–µ—Ç pop())
    const nextCard = currentGamePlayerDeck[currentGamePlayerDeck.length - 1];
    if (nextCard) {
      const preview = gameStore.previewNextCardOutcome(playerHand, playerScore, nextCard);
      setDestinyPreview(preview);
      setShowDestinyPreview(true);
    } else {
      setWinner('üéØ –í –∫–æ–ª–æ–¥–µ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è!');
      setTimeout(() => setWinner(''), 2000);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç—ã —Å—É–¥—å–±—ã
  const handleDestinyPreviewClose = () => {
    setShowDestinyPreview(false);
    setDestinyPreview(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–∏ –¥–ª—è –º–∞–≥–Ω–∏—Ç–∞ –º–∞—Å—Ç–µ–π
  const handleSuitChoice = (suitSymbol) => {
    const result = gameStore.applySuitMagnet(suitSymbol);
    if (result.success) {
      setWinner(result.message);
      setTimeout(() => setWinner(''), 3000);
    } else {
      setWinner(result.message);
      setTimeout(() => setWinner(''), 2000);
    }
    
    setShowSuitChoice(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏—è
  const handleForesightActivate = () => {
    if (currentGamePlayerDeck.length < 2) {
      setWinner('üîÆ –í –∫–æ–ª–æ–¥–µ –º–∞–ª–æ –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏—è!');
      setTimeout(() => setWinner(''), 2000);
      return;
    }

    const deckLength = currentGamePlayerDeck.length;
    const nextTwoCards = [
      currentGamePlayerDeck[deckLength - 1],
      currentGamePlayerDeck[deckLength - 2]
    ];
    
    setForesightCards(nextTwoCards);
    
    setWinner('üîÆ –ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ: –ø–æ–∫–∞–∑–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ 2 –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ!');
    vibrate('light');
    
    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –∫–∞—Ä—Ç—ã
    setTimeout(() => {
      setWinner('');
    }, 2000); // –°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫
    
    setTimeout(() => {
      setForesightCards([]);
    }, 5000); // –ö–∞—Ä—Ç—ã –∏—Å—á–µ–∑–∞—é—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫
  };

  return (
    <div className="main-game">
      <h1 className="header">SpellJack</h1>

      {/* –ú–æ–¥–∞–ª–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–¥–æ–π */}
      <ActualDeckControl 
        visible={showDeck} 
        onClose={() => setShowDeck(false)} 
        deck={currentGamePlayerDeck}
      />

      <div className="game-info">
        <div className="game-target">
          <h3>Target Score: {gameStore.currentTarget}</h3>
          {gameStore.activeEffects.doubleBet && (
            <div className="double-bet-indicator">
              üí∞ –î–≤–æ–π–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! x2 –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É!
            </div>
          )}
        </div>
        <div className="suit-multipliers">
          <h4>Suit Multipliers:</h4>
          <div className="multipliers-table">
            <div className={`multiplier-item ${gameStore.activeEffects.luckySuitActive === '‚ô†' ? 'lucky-suit-boosted' : ''}`}>
              <span className="suit-symbol">‚ô†</span>
              <span className="multiplier-value">x{gameStore.getSuitMultiplier('‚ô†')}</span>
            </div>
            <div className={`multiplier-item ${gameStore.activeEffects.luckySuitActive === '‚ô•' ? 'lucky-suit-boosted' : ''}`}>
              <span className="suit-symbol red-suit">‚ô•</span>
              <span className="multiplier-value">x{gameStore.getSuitMultiplier('‚ô•')}</span>
            </div>
            <div className={`multiplier-item ${gameStore.activeEffects.luckySuitActive === '‚ô¶' ? 'lucky-suit-boosted' : ''}`}>
              <span className="suit-symbol red-suit">‚ô¶</span>
              <span className="multiplier-value">x{gameStore.getSuitMultiplier('‚ô¶')}</span>
            </div>
            <div className={`multiplier-item ${gameStore.activeEffects.luckySuitActive === '‚ô£' ? 'lucky-suit-boosted' : ''}`}>
              <span className="suit-symbol">‚ô£</span>
              <span className="multiplier-value">x{gameStore.getSuitMultiplier('‚ô£')}</span>
            </div>
          </div>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞ */}
          {gameStore.activeEffects.stabilizer && (
            <div className="stabilizer-indicator">
              ‚öñÔ∏è –°—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã x1.0
            </div>
          )}
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–æ–ª–æ—Ç–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è */}
          {gameStore.activeEffects.goldenTouch && (
            <div className="golden-touch-indicator">
              ‚ú® –ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ - —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—Å—Ç –º–æ–Ω–µ—Ç—ã!
            </div>
          )}
        </div>
        
      </div>

      <Dealer
        hand={dealerHand}
        score={dealerScore}
        showFirstCard={isPlayerTurn && !gameStore.activeEffects.revealDealerCard}
      />

      {/* –ü–∞–Ω–µ–ª—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ */}
      {isCriticalChoiceMode && (
        <div className="critical-choice-panel">
          <h3>üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä - –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É:</h3>
          <div className="critical-choice-cards">
            {criticalChoiceCards.map((card, index) => {
              const isRed = card.suit === '‚ô•' || card.suit === '‚ô¶';
              return (
                <div 
                  key={index}
                  className={`card critical-choice-card ${isRed ? 'red-card' : ''}`}
                  onClick={() => handleCriticalCardChoice(index)}
                >
                  <div className="card-value">{card.value}</div>
                  <div className="card-suit">{card.suit}</div>
                  <div className="choice-indicator">
                    –í—ã–±—Ä–∞—Ç—å
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–∏ –¥–ª—è –º–∞–≥–Ω–∏—Ç–∞ –º–∞—Å—Ç–µ–π */}
      {showSuitChoice && (
        <div className="suit-choice-panel">
          <h3>üß≤ –ú–∞–≥–Ω–∏—Ç –º–∞—Å—Ç–µ–π - –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç—å –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è:</h3>
          <div className="suit-choice-options">
            {['‚ô•', '‚ô¶', '‚ô£', '‚ô†'].map((suit) => {
              const isRed = suit === '‚ô•' || suit === '‚ô¶';
              return (
                <div 
                  key={suit}
                  className={`suit-choice-option ${isRed ? 'red-suit' : 'black-suit'}`}
                  onClick={() => handleSuitChoice(suit)}
                >
                  <div className="suit-symbol">{suit}</div>
                  <div className="suit-name">
                    {suit === '‚ô•' ? '–ß–µ—Ä–≤—ã' : 
                     suit === '‚ô¶' ? '–ë—É–±–Ω—ã' :
                     suit === '‚ô£' ? '–¢—Ä–µ—Ñ—ã' : '–ü–∏–∫–∏'}
                  </div>
                  <div className="current-multiplier">
                    x{gameStore.getSuitMultiplier(suit)}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* –ü–∞–Ω–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ä—Ç—ã —Å—É–¥—å–±—ã */}
      {showDestinyPreview && destinyPreview && (
        <div className="destiny-preview-panel">
          <h3>üîÆ –ö–∞—Ä—Ç–∞ —Å—É–¥—å–±—ã - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ:</h3>
          <div className="destiny-preview-content">
            <div className="predicted-card">
              <div className={`card ${(destinyPreview.nextCard.suit === '‚ô•' || destinyPreview.nextCard.suit === '‚ô¶') ? 'red-card' : ''}`}>
                <div className="card-value">{destinyPreview.nextCard.value}</div>
                <div className="card-suit">{destinyPreview.nextCard.suit}</div>
              </div>
              <div className="card-info">
                <div>–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞</div>
                <div className="card-name">{destinyPreview.nextCard.name}</div>
              </div>
            </div>
            <div className="prediction-results">
              <div className="prediction-item">
                <span>–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏:</span>
                <span className="current-score">{destinyPreview.currentScore}</span>
              </div>
              <div className="prediction-item main-prediction">
                <span>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –æ—á–∫–∏:</span>
                <span className="predicted-score">{destinyPreview.predictedScore}</span>
              </div>
              <div className="prediction-item">
                <span>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</span>
                <span className={`score-change ${destinyPreview.scoreChange >= 0 ? 'positive' : 'negative'}`}>
                  {destinyPreview.scoreChange >= 0 ? '+' : ''}{destinyPreview.scoreChange}
                </span>
              </div>
            </div>
            <div className="destiny-actions">
              <button className="destiny-close-btn" onClick={handleDestinyPreviewClose}>
                –ü–æ–Ω—è—Ç–Ω–æ
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="game-area">
        {/* –°–¢–û–ü–ö–ê –ö–ê–†–¢ ‚Äî –∫–ª–∏–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É */}
        <div
          className={`deck-stack ${isAnimating ? 'animate-deal' : ''}`}
          role="button"
          tabIndex={0}
          aria-label="Show current deck"
          onClick={() => setShowDeck(true)}
          onKeyDown={(e) => (e.key === 'Enter' || e.key === ' ') && setShowDeck(true)}
          title="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–¥—É"
          style={{ cursor: 'pointer' }}
        >
          <div className="card back-card">?</div>
          {nextCardSuit && (
            <div className="next-card-suit-indicator">
              üó∫Ô∏è {nextCardSuit}
            </div>
          )}
        </div>

        {winner && (
          <div className="winner-section">
            <h2 className="winner-message">{winner}</h2>
            {(winner.includes('Player wins!')) && (
              <button 
                className="share-button"
                onClick={() => shareScore(playerScore)}
                title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"
              >
                üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
              </button>
            )}
          </div>
        )}

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏—è */}
        {foresightCards.length > 0 && (
          <div className="foresight-section">
            <h3>üîÆ –°–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ:</h3>
            <div className="foresight-cards">
              {foresightCards.map((card, index) => {
                const isRed = card.suit === '‚ô•' || card.suit === '‚ô¶';
                return (
                  <div key={`foresight-${index}`} className={`foresight-card ${isRed ? 'red-card' : ''}`}>
                    <div className="card-value">{card.value}</div>
                    <div className="card-suit">{card.suit}</div>
                    <div className="card-order">{index + 1}</div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        <Player 
          hand={playerHand} 
          score={playerScore} 
          isCardSelectionMode={isCardSelectionMode}
          onCardSwap={handleCardSwap}
        />
      </div>

      {/* –ü–∞–Ω–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç */}
      <SpecialCardsPanel 
        store={gameStore} 
        onCardSwapActivate={handleCardSwapActivate}
        onResetHand={handleResetHand}
        onCriticalChoiceActivate={handleCriticalChoiceActivate}
        onCartographerActivate={handleCartographerActivate}
        onLeafFallActivate={handleLeafFallActivate}
        onForesightActivate={handleForesightActivate}
        onSuitMagnetActivate={handleSuitMagnetActivate}
        onDestinyActivate={handleDestinyActivate}
        isBlocked={isCriticalChoiceMode}
      />

      <Controls
        onHit={handleHit}
        onStand={handleStand}
        onNewGame={startNewGame}
        isGameActive={isGameActive && isPlayerTurn && !isCriticalChoiceMode}
      />
    </div>
  );
});

export default MainGame;