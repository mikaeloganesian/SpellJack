import React from 'react';
import { gameStore } from '../Store';

const Card = ({ card, suitMultiplier, bonusPoints, isDoubleNextActive, isSelectable, onCardClick, cardIndex }) => {
  const isRed = card.suit === '‚ô•' || card.suit === '‚ô¶';
  const hasBonus = suitMultiplier > 1.0;
  const willBeDoubled = isDoubleNextActive && !card.special;
  const isAceWithArmor = card.value === 'A' && gameStore.activeEffects.aceArmor;
  const isFireAce = card.value === 'A' && gameStore.activeEffects.fireAce;
  const isLuckySeven = card.value === '7' && gameStore.activeEffects.luckySeven;
  const isChronometerCard = card.chronometerEffect;
  
  return (
    <div 
      className={`card ${isRed ? 'red-card' : ''} ${hasBonus ? 'bonus-card' : ''} ${willBeDoubled ? 'double-next-card' : ''} ${isSelectable ? 'selectable-card' : ''} ${isAceWithArmor ? 'ace-armor-card' : ''} ${isFireAce ? 'fire-ace-card' : ''} ${isLuckySeven ? 'lucky-seven-card' : ''} ${isChronometerCard ? 'chronometer-card' : ''}`}
      onClick={isSelectable ? () => onCardClick(cardIndex) : undefined}
      style={{ cursor: isSelectable ? 'pointer' : 'default' }}
    >
      <div className="card-value">{card.value}</div>
      <div className="card-suit">{card.suit}</div>
      {hasBonus && (
        <div className="bonus-indicator">
          x{suitMultiplier} (+{bonusPoints})
        </div>
      )}
      {willBeDoubled && (
        <div className="double-next-indicator">
          ‚ö° x2!
        </div>
      )}
      {isAceWithArmor && (
        <div className="ace-armor-badge">
          üõ°Ô∏è
        </div>
      )}
      {isFireAce && (
        <div className="fire-ace-badge">
          üî•
        </div>
      )}
      {isLuckySeven && (
        <div className="lucky-seven-badge">
          üçÄ
        </div>
      )}
      {isChronometerCard && (
        <div className="chronometer-badge">
          ‚è∞ ¬Ω
        </div>
      )}
      {isSelectable && (
        <div className="swap-indicator">
          üîÑ
        </div>
      )}
    </div>
  );
};

const Player = ({ hand, score, isCardSelectionMode, onCardSwap }) => {
  const getHandContainerClass = () => {
    const cardCount = hand.length;
    if (cardCount >= 12) return 'hand-container many-cards';
    if (cardCount >= 8) return 'hand-container medium-cards';
    return 'hand-container';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤ –∫–∞—Ä—Ç—ã –ø–æ –º–∞—Å—Ç–∏
  const getCardBonusInfo = (card) => {
    if (card.special) return { suitMultiplier: 1.0, bonusPoints: 0 };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–∏–π
    const suitMultiplier = card.suitMultiplierSnapshot || gameStore.getSuitMultiplier(card.suit);
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑"
    let baseValue = 0;
    if (['J', 'Q', 'K'].includes(card.value)) {
      baseValue = 10;
    } else if (card.value === 'A') {
      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑"
      if (gameStore.activeEffects.fireAce) {
        baseValue = 12; // –û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑ = 12 –æ—á–∫–æ–≤
      } else {
        baseValue = 11; // –û–±—ã—á–Ω—ã–π —Ç—É–∑ = 11 –æ—á–∫–æ–≤
      }
    } else {
      baseValue = parseInt(card.value);
    }
    
    const bonusPoints = Math.floor(baseValue * suitMultiplier) - baseValue;
    
    return { suitMultiplier, bonusPoints };
  };

  return (
    <div className="player-container">
      <h2>
        Player ({score})
        {gameStore.activeEffects.aceArmor && (
          <span className="ace-armor-indicator"> üõ°Ô∏è –¢—É–∑-–±—Ä–æ–Ω—è</span>
        )}
        {gameStore.activeEffects.fireAce && (
          <span className="fire-ace-indicator"> üî• –û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑</span>
        )}
        {gameStore.activeEffects.luckySeven && (
          <span className="lucky-seven-indicator"> üçÄ –°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞</span>
        )}
        {gameStore.activeEffects.chronometer > 0 && (
          <span className="chronometer-indicator"> ‚è∞ –•—Ä–æ–Ω–æ–º–µ—Ç—Ä ({gameStore.activeEffects.chronometer})</span>
        )}
        {gameStore.activeEffects.royalDecree && (
          <span className="royal-decree-indicator"> üëë –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —É–∫–∞–∑ (+2 –∫ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ)</span>
        )}
        {isCardSelectionMode && (
          <span className="selection-hint"> - –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞</span>
        )}
      </h2>
      <div className={getHandContainerClass()}>
        {hand.map((card, index) => {
          const { suitMultiplier, bonusPoints } = getCardBonusInfo(card);
          // –£–±–∏—Ä–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É - —ç—Ñ—Ñ–µ–∫—Ç doubleNext –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –≤ —Ä—É–∫–µ
          
          return (
            <Card 
              key={index} 
              card={card} 
              suitMultiplier={suitMultiplier}
              bonusPoints={bonusPoints}
              isDoubleNextActive={false} // –í—Å–µ–≥–¥–∞ false, —Ç–∞–∫ –∫–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç—É
              isSelectable={isCardSelectionMode}
              onCardClick={onCardSwap}
              cardIndex={index}
            />
          );
        })}
      </div>
    </div>
  );
};

export default Player;