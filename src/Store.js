import { makeObservable, observable, action } from 'mobx';
import { specialCards } from './data/specialCards';

const generateStandardDeck = () => {
  const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
  const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
  const deck = [];
  let idCounter = 100;
  for (let suit of suits) {
    for (let value of values) {
      deck.push({ id: idCounter++, value, suit, special: false });
    }
  }
  return deck;
};

const generateStarterDeck = () => {
  // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–ª–æ–¥–∞: –ø—Ä–æ—Å—Ç—ã–µ –∫–∞—Ä—Ç—ã 2-10 –≤—Å–µ—Ö –º–∞—Å—Ç–µ–π (–ø–æ–ª–Ω–∞—è –∫–æ–ª–æ–¥–∞)
  const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
  const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10'];
  const deck = [];
  let idCounter = 100;
  for (let suit of suits) {
    for (let value of values) {
      deck.push({ id: idCounter++, value, suit, special: false });
    }
  }
  return deck; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–ª–æ–¥—É (36 –∫–∞—Ä—Ç)
};


const generateStartedOwnedDeck = () => {
  const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
  const values = [ 'J', 'Q', 'K', 'A'];
  const deck = [];
  let idCounter = 10000;
  for (let suit of suits) {
    for (let value of values) {
      deck.push({ id: idCounter++, value, suit, special: false });
    }
  }
  return deck;
}

class GameStore {
  coins = 10000;
  playerDeck = generateStarterDeck();        // –ò–≥—Ä–æ–≤–∞—è –∫–æ–ª–æ–¥–∞ (36 –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã)
  playerOwnedCards = generateStartedOwnedDeck(); // –í—Å–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–∫–æ–ª–ª–µ–∫—Ü–∏—è)
  availableCards = specialCards;
  currentTarget = 21;                        // –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å –∏–≥—Ä—ã

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ–π –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
  suitMultipliers = {};                      // {suit: multiplier} –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—Å—Ç–∏

  // –°–∏—Å—Ç–µ–º–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
  activeSpecialCards = [];                   // –°–ø–µ—Ü.–∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ (–º–∞–∫—Å 3 –≤ –∫–æ–ª–æ–¥–µ)
  usedSpecialEffects = [];                   // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –ø–∞—Ä—Ç–∏–∏
  
  activeEffects = {
    // === 21 —ç—Ñ—Ñ–µ–∫—Ç –∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç ===

    // 1. –û—Ç–∫—Ä—ã—Ç—ã–π –≤–∑–≥–ª—è–¥
    revealDealerCard: false,

    // 2. –©–∏—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∞
    shield: false,

    // 3. –î–≤–æ–π–Ω–æ–π —É–¥–∞—Ä
    doubleNext: false,

    // 4. –ö–∞—Ä—Ç–∞-–ª–æ–≤—É—à–∫–∞
    dealerTrap: false,

    // 5. –û–±–º–µ–Ω —É–¥–∞—á–∏
    swapCard: false,

    // 6. –¢—É–∑–æ–≤–∞—è –±—Ä–æ–Ω—è
    aceArmor: false,

    // 7. –°–±—Ä–æ—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)

    // 8. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)

    // 9. –î–≤–æ–π–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    doubleBet: false,


    // 10. –ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)

    // 11. –û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑
    fireAce: false,

    // 12. –°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—ë—Ä–∫–∞
    luckySeven: false,

    // 13. –õ–∏—Å—Ç–æ–ø–∞–¥ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)

    // 14. –ú–∞—Å—Ç—å —É–¥–∞—á–∏
    luckySuitActive: null, // –ö–∞–∫–∞—è –º–∞—Å—Ç—å –ø–æ–ª—É—á–∏–ª–∞ –±—É—Å—Ç

    // 15. –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏—è (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)

    // 16. –°—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä
    stabilizer: false,

    // 17. –ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ
    goldenTouch: false,

    // 18. –•—Ä–æ–Ω–æ–º–µ—Ç—Ä
    chronometer: 0, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç —Å –ø–æ–ª–æ–≤–∏–Ω–Ω—ã–º–∏ –æ—á–∫–∞–º–∏

    // 19. –ú–∞–≥–Ω–∏—Ç –º–∞—Å—Ç–µ–π 
    suitMagnetActive: null, // –ê–∫—Ç–∏–≤–Ω–∞—è –º–∞—Å—Ç—å –¥–ª—è –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞

    // 20. –ö–∞—Ä—Ç–∞ —Å—É–¥—å–±—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ

    // 21. –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —É–∫–∞–∑
    royalDecree: false,

  };

  constructor() {
    makeObservable(this, {
      coins: observable,
      playerDeck: observable,
      playerOwnedCards: observable,
      availableCards: observable,
      currentTarget: observable,
      suitMultipliers: observable,
      activeEffects: observable,
      activeSpecialCards: observable,
      usedSpecialEffects: observable,
      addCoins: action,
      addCardToDeck: action,
      removeCardFromDeck: action,
      buyCard: action,
      applyCardEffect: action,
      addSpecialCardToDeck: action,
      removeSpecialCardFromDeck: action,
      activateSpecialCard: action,
      resetGameEffects: action,
      disableDealerTrap: action,
      disableSwapCard: action,
      disableShield: action,
      applyAutoEffects: action,
      checkPassiveEffects: action,
      generateNewTarget: action,
      generateSuitMultipliers: action,
    });
  }

  addCoins(amount) {
    this.coins += amount;
  }

  addCardToDeck(card) {
    if (this.playerDeck.length < 52) {
      this.playerDeck.push(card);
    }
  }

  removeCardFromDeck(cardId) {
    const removed = this.playerDeck.find(c => c.id === cardId);
    if (!removed) return;
    this.playerDeck = this.playerDeck.filter(c => c.id !== cardId);
    this.playerOwnedCards.push(removed);
  }


  // –ú–µ—Ç–æ–¥ –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ Shop
  buyCard(card) { 
    if (this.coins >= card.cost) {
      this.coins -= card.cost;
      this.playerOwnedCards.push(card);
      this.availableCards = this.availableCards.filter(c => c.id !== card.id);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
  addSpecialCardToDeck(card) {
    if (this.activeSpecialCards.length >= 3) {
      return false; // –ú–∞–∫—Å–∏–º—É–º 3 —Å–ø–µ—Ü.–∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ
    }
    this.activeSpecialCards.push(card);
    return true;
  }

  removeSpecialCardFromDeck(cardId) {
    this.activeSpecialCards = this.activeSpecialCards.filter(card => card.id !== cardId);
  }

  canActivateCard(cardId) {
    return !this.usedSpecialEffects.includes(cardId);
  }

  activateSpecialCard(cardId) {
    const card = this.activeSpecialCards.find(c => c.id === cardId);
    if (!card || this.usedSpecialEffects.includes(cardId)) {
      return false;
    }

    this.usedSpecialEffects.push(cardId);
    const result = this.applyCardEffect(card.effect);
    return result || true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ true –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  }

  applyCardEffect(effectName) {
    switch (effectName) {
      // === 21 –∫–∞—Ä—Ç–∞ –∏–∑ –±–∞–∑—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç ===
      
      case 'revealDealerCard':
        this.activeEffects.revealDealerCard = true;
        break;
      
      case 'shield':
        this.activeEffects.shield = true;
        break;
      
      case 'doubleNext':
        this.activeEffects.doubleNext = true;
        break;
      
      case 'dealerTrap':
        this.activeEffects.dealerTrap = true;
        break;
      
      case 'swapCard':
        this.activeEffects.swapCard = true;
        break;
      
      case 'aceArmor':
        this.activeEffects.aceArmor = true;
        break;
      
      case 'resetHand':
        console.log('Reset hand activated');
        break;
      
      case 'criticalChoice':
        console.log('Critical choice activated');
        break;
      
      case 'doubleBet':
        this.activeEffects.doubleBet = true;
        break;
      
      case 'showNextSuit':
        console.log('Show next suit activated');
        break;
      
      case 'fireAce':
        this.activeEffects.fireAce = true;
        break;
      
      case 'luckySeven':
        this.activeEffects.luckySeven = true;
        break;
      
      case 'leafFall':
        // –õ–∏—Å—Ç–æ–ø–∞–¥: —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏ –¥–∞—ë—Ç +3 –º–æ–Ω–µ—Ç—ã
        console.log('–õ–∏—Å—Ç–æ–ø–∞–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        break;
      
      case 'luckySuit':
        const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
        const randomSuit = suits[Math.floor(Math.random() * suits.length)];
        const currentMultiplier = this.getSuitMultiplier(randomSuit);
        const newMultiplier = Math.min(currentMultiplier * 2, 4.0);
        this.suitMultipliers[randomSuit] = newMultiplier;
        this.activeEffects.luckySuitActive = randomSuit;
        console.log(`Lucky suit activated: ${randomSuit} multiplier doubled to ${newMultiplier}`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return {
          success: true,
          message: `üåü –ú–∞—Å—Ç—å —É–¥–∞—á–∏: ${randomSuit} —É—Å–∏–ª–µ–Ω–∞ –¥–æ x${newMultiplier}!`
        };
        break;
      
      case 'foresight':
        console.log('Foresight activated');
        break;
      
      case 'stabilizer':
        this.activeEffects.stabilizer = true;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ 1.0
        this.suitMultipliers = {
          '‚ô†': 1.0,
          '‚ô•': 1.0,
          '‚ô¶': 1.0,
          '‚ô£': 1.0
        };
        console.log('Stabilizer activated: all suit multipliers set to 1.0');
        
        return {
          success: true,
          message: '‚öñÔ∏è –°—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 1.0!'
        };
        break;
      
      case 'goldenTouch':
        this.activeEffects.goldenTouch = true;
        console.log('Golden touch activated: next card will give coins equal to its score contribution');
        
        return {
          success: true,
          message: '‚ú® –ó–æ–ª–æ—Ç–æ–µ –∫–∞—Å–∞–Ω–∏–µ: —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—Å—Ç –º–æ–Ω–µ—Ç—ã —Ä–∞–≤–Ω—ã–µ –µ—ë –æ—á–∫–∞–º!'
        };
        break;
      
      case 'chronometer':
        this.activeEffects.chronometer = 2; // –°–ª–µ–¥—É—é—â–∏–µ 2 –∫–∞—Ä—Ç—ã –¥–∞—é—Ç –ø–æ–ª–æ–≤–∏–Ω—É –æ—á–∫–æ–≤
        console.log('Chronometer activated: next 2 cards will give half points');
        
        return {
          success: true,
          message: '‚è∞ –•—Ä–æ–Ω–æ–º–µ—Ç—Ä: —Å–ª–µ–¥—É—é—â–∏–µ 2 –∫–∞—Ä—Ç—ã –¥–∞—é—Ç –ø–æ–ª–æ–≤–∏–Ω—É –æ—á–∫–æ–≤!'
        };
        break;
      
      case 'suitMagnet':
        // –î–ª—è –º–∞–≥–Ω–∏—Ç–∞ –º–∞—Å—Ç–µ–π –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫—É
        console.log('Suit magnet activated: player should choose a suit');
        
        return {
          success: true,
          requiresSuitChoice: true,
          message: 'üß≤ –ú–∞–≥–Ω–∏—Ç –º–∞—Å—Ç–µ–π: –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç—å –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è!'
        };
        break;
      
      case 'destiny':
        // –ö–∞—Ä—Ç–∞ —Å—É–¥—å–±—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã
        console.log('Destiny card activated: showing next card outcome');
        return {
          success: true,
          requiresDestinyPreview: true,
          message: 'üéØ –ö–∞—Ä—Ç–∞ —Å—É–¥—å–±—ã: –ø–æ–∫–∞–∑—ã–≤–∞—é –∏—Å—Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã!'
        };
        break;
      
      case 'royalDecree':
        this.activeEffects.royalDecree = true;
        break;
      
      // –°—Ç–∞—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      case 'extraCard':
        this.activeEffects.extraCard = true;
        break;
      
      default:
        console.log(`Unknown effect: ${effectName}`);
    }
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–≥–Ω–∏—Ç–∞ –º–∞—Å—Ç–µ–π - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Å—Ç–∏
  applySuitMagnet(chosenSuit) {
    if (!chosenSuit || this.suitMultipliers[chosenSuit] === undefined) {
      return { success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞—Å—Ç—å!' };
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Å—Ç–∏ –Ω–∞ 1
    this.suitMultipliers[chosenSuit] += 1;
    
    // –û—Ç–º–µ—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    this.suitMagnetActive = false;

    const suitNames = {
      '‚ô•': '–ß–µ—Ä–≤—ã',
      '‚ô¶': '–ë—É–±–Ω—ã', 
      '‚ô£': '–¢—Ä–µ—Ñ—ã',
      '‚ô†': '–ü–∏–∫–∏'
    };

    return { 
      success: true, 
      message: `üß≤ –ú–∞–≥–Ω–∏—Ç –º–∞—Å—Ç–µ–π: ${suitNames[chosenSuit]} +1 (—Ç–µ–ø–µ—Ä—å x${this.suitMultipliers[chosenSuit]})!` 
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∫–∞—Ä—Ç—ã —Å—É–¥—å–±—ã - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã
  previewNextCardOutcome(playerHand, currentScore, nextCard) {
    if (!nextCard || nextCard.special) {
      return {
        success: false,
        message: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã!'
      };
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä—É–∫—É —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
    const tempHand = [...playerHand, { ...nextCard }];
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    let cardValue = 0;
    if (['J', 'Q', 'K'].includes(nextCard.value)) {
      cardValue = 10;
    } else if (nextCard.value === 'A') {
      // –£—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–û–≥–Ω–µ–Ω–Ω—ã–π —Ç—É–∑"
      if (this.activeEffects.fireAce) {
        cardValue = 12;
      } else {
        cardValue = 11;
      }
    } else {
      cardValue = parseInt(nextCard.value, 10);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–∏
    const suitMultiplier = this.getSuitMultiplier(nextCard.suit);
    cardValue = Math.floor(cardValue * suitMultiplier);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞ (–ø–æ–ª–æ–≤–∏–Ω–∞ –æ—á–∫–æ–≤)
    if (this.activeEffects.chronometer > 0) {
      cardValue = Math.floor(cardValue / 2);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–≤–æ–π–Ω–æ–≥–æ —É–¥–∞—Ä–∞
    if (this.activeEffects.doubleNext) {
      cardValue *= 2;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —É–∫–∞–∑ (+2 –æ—á–∫–∞)
    if (this.activeEffects.royalDecree) {
      cardValue += 2;
    }

    const predictedScore = currentScore + cardValue;
    const isOverTarget = predictedScore > this.currentTarget;
    const scoreChange = cardValue;

    return {
      success: true,
      currentScore: currentScore,
      nextCard: nextCard,
      cardValue: cardValue,
      predictedScore: predictedScore,
      scoreChange: scoreChange,
      isOverTarget: isOverTarget,
      suitMultiplier: suitMultiplier,
      message: `üéØ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞: ${nextCard.value}${nextCard.suit} (${cardValue} –æ—á–∫–æ–≤) ‚Üí –ò—Ç–æ–≥–æ: ${predictedScore} ${isOverTarget ? '‚ö†Ô∏è –ü–ï–†–ï–ë–û–†!' : '‚úÖ'}`
    };
  }

  // –°–±—Ä–æ—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  resetGameEffects() {
    this.usedSpecialEffects = [];
    this.activeEffects = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
      revealDealerCard: false,
      shield: false,
      doubleNext: false,
      swapCard: false,
      dealerTrap: false,
      aceArmor: false,
      doubleBet: false,
      fireAce: false,
      luckySeven: false,
      luckySuitActive: null,
      dealerFrozen: false,
      goldenTouch: false,
      chronometer: 0,
      royalDecree: false,
      suitMagnetActive: null,
      extraCard: false,
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≤—É—à–∫–∏ (MobX action)
  disableDealerTrap() {
    this.activeEffects.dealerTrap = false;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç—ã (MobX action)
  disableSwapCard() {
    this.activeEffects.swapCard = false;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —â–∏—Ç–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∞ (MobX action)
  disableShield() {
    this.activeEffects.shield = false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  getManualActivationCards() {
    return this.activeSpecialCards.filter(card => 
      card.activationType === 'manual' && 
      !this.usedSpecialEffects.includes(card.id)
    );
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫–∞—Ä—Ç—ã
  applyAutoEffects() {
    this.activeSpecialCards
      .filter(card => card.activationType === 'auto' && !this.usedSpecialEffects.includes(card.id))
      .forEach(card => {
        this.activateSpecialCard(card.id);
      });
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)
  checkPassiveEffects(context) {
    this.activeSpecialCards
      .filter(card => card.activationType === 'passive' && !this.usedSpecialEffects.includes(card.id))
      .forEach(card => {
        // –ü–∞—Å—Å–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –ø–æ —É—Å–ª–æ–≤–∏—è–º –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
        this.checkPassiveCondition(card, context);
      });
  }

  checkPassiveCondition(card, context) {
    switch(card.effect) {
      case 'shield':
        if (context === 'gameStart') {
          console.log('üõ°Ô∏è –©–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          this.activeEffects.shield = true;
        }
        break;
      case 'aceArmor':
        if (context === 'gameStart') {
          this.activeEffects.aceArmor = true;
        }
        break;
      case 'fireAce':
        if (context === 'gameStart') {
          this.activeEffects.fireAce = true;
        }
        break;
      case 'doubleBet':
        if (context === 'gameStart') {
          this.activeEffects.doubleBet = true;
        }
        break;
      case 'luckySeven':
        if (context === 'gameStart') {
          this.activeEffects.luckySeven = true;
        }
        break;
      case 'luckySuit':
        if (context === 'gameStart') {
          this.applyCardEffect('luckySuit');
        }
        break;
      case 'royalDecree':
        if (context === 'gameStart') {
          this.activeEffects.royalDecree = true;
        }
        break;
    }
  }

  generateNewTarget() {
    this.currentTarget = Math.floor(Math.random() * (100 - 21 + 1)) + 21;
  }


  generateSuitMultipliers() {
    const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
    this.suitMultipliers = {};
    
    suits.forEach(suit => {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç 1.0 –¥–æ 4.0 —Å –æ–¥–Ω–∏–º –∑–Ω–∞–∫–æ–º –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      const multiplier = Math.round((Math.random() * 3 + 1) * 10) / 10;
      this.suitMultipliers[suit] = multiplier;
    });
  }


  getSuitMultiplier(suit) {
    return this.suitMultipliers[suit] || 1.0;
  }
}

export const gameStore = new GameStore();